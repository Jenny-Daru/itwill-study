<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/maven-v4_0_0.xsd">
	<!-- pom.xml : Maven 프로그램을 이용하여 라이브러리 저장소로부터 다운로드 받아 빌드하기 위한 정보를 제공하는 환경설정 파일 -->
	<!--           => 사용자 디렉토리의 .m2디렉토리에 라이브러리 파일을 다운로드 받아 저장 -->
	<!-- 		   => 라이브러리 파일 빌드에 문제가 있는 경우 이클립스 종료 후 .m2 디렉토리 삭제 후 재빌드 -->
	<!--              but, 작동하지 않는다면 우클릭 Maven >> update 또는 Run As >> Maven clean 클릭 (정말 작동 안될시 할것!!) -->
	                  
	<modelVersion>4.0.0</modelVersion>
	<groupId>site.itwill</groupId>
	<artifactId>controller</artifactId>
	<name>spring</name>
	<packaging>war</packaging>
	<version>1.0.0-BUILD-SNAPSHOT</version>
	<!-- properties : pom.xml 파일에서 자주 사용하는 값을 별칭으로 등록하기 위한 엘리먼트 -->
	<!--              => 하위 엘리먼트의 이름이 별칭으로 사용 -->
	<!--              => 하위 엘리먼트의 내용이 값으로 사용 -->
	<!-- 			  => ${별칭} 형식으로 등록된 값 표현 - 라이브러리 버전을 효율적으로 관리하기 위해 사용 -->
	
	<!-- 스프링 프레임워크에 대한 라이브러리 굉장히 많이 존재 ! 라이브러리 마다 버전이 다르면 제대로 동작 불가 그러므로 버전이 동일해야함! 
	     버전이 변경될시 각각 변경해야 하지만 여기서는 한번에 변경가능 -->
	<!-- 메이븐에서 사용하는 라이브러리 관리만 할뿐 -->
	<properties>
		<java-version>1.8</java-version>
		<org.springframework-version>5.2.4.RELEASE</org.springframework-version>
		<org.aspectj-version>1.9.5</org.aspectj-version>
		<org.slf4j-version>1.7.30</org.slf4j-version>
	</properties>
	
	<!-- dependencies : 빌드할 라이브러리 목록을 설정하기 위한 엘리먼트 -->
	<dependencies>
		<!-- ♥ dependency ♥ : 빌드 하고자 하는 라이브러리 정보를 제공하기 위한 엘리먼트 -->
		<!-- 					=> 빌드 하고자 하는 라이브러리 파일이 없는 경우 저장소에서 다운로드 받아 빌드 -->
		<!-- 				    => https://mvnrepository.com 사이트 참조 (라이브러리의 저장소 url주소 존재)  -->
		<!--                    => 의존 관계의 라이브러리 파일도 빌드 (메이븐의 장점) -->
		<!-- Spring -->
		<dependency>
			<!-- groupId : 라이브러리 그룹을 설정하기 위한 엘리먼트 -->
			<!--            => 패키지 설정시 도메인 -->
			<groupId>org.springframework</groupId>
			<!-- artifactId : 라이브러리 이름을 설정하기 위한 엘리먼트 -->
			<artifactId>spring-context</artifactId>
			<!-- version : 라이브러리 버전을 설정하기 위한 엘리먼트, 라이브러리의 고유값 -->
			<!--           properties가 값으로 표현됨.  -->
			<version>${org.springframework-version}</version>
			<!-- exclusions : 의존관계의 라이브러리 중 제외 라이브러리 목록을 설정하는 엘리먼트  -->
			<exclusions>
				<!-- Exclude Commons Logging in favor of SLF4j -->
				<!-- exclusion : 의존 관계의 라이브러리 중 제외 라이브러리를 설정하는 엘리먼트 -->
				<exclusion>
					<groupId>commons-logging</groupId>
					<artifactId>commons-logging</artifactId>
				 </exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
			<version>${org.springframework-version}</version>
		</dependency>
				
		<!-- AspectJ : weaving 시켜주는 것이 아니고 이미 합쳐진것을 실행시켜주는 것 -->
		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjrt</artifactId>
			<version>${org.aspectj-version}</version>
		</dependency>	
		
		<!-- Logging -->
		<dependency>
			<!-- sl4j-api : 다양한 형태의 매체에 로그를 표현하는 구현체 -->
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>${org.slf4j-version}</version>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>jcl-over-slf4j</artifactId>
			<version>${org.slf4j-version}</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-log4j12</artifactId>
			<version>${org.slf4j-version}</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<!-- log4j : 아파치 톰캣이 제공하는 가장 기본적인 로그 구현체 ,로그발생 역할 및 발생된 로그 기록(개발자가 사용) -->
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<version>1.2.17</version>
			<exclusions>
				<exclusion>
					<groupId>javax.mail</groupId>
					<artifactId>mail</artifactId>
				</exclusion>
				<exclusion>
					<groupId>javax.jms</groupId>
					<artifactId>jms</artifactId>
				</exclusion>
				<exclusion>
					<groupId>com.sun.jdmk</groupId>
					<artifactId>jmxtools</artifactId>
				</exclusion>
				<exclusion>
					<groupId>com.sun.jmx</groupId>
					<artifactId>jmxri</artifactId>
				</exclusion>
			</exclusions>
			<scope>runtime</scope>
		</dependency>

		<!-- @Inject : resource어노테이션 -->
		<dependency>
			<groupId>javax.inject</groupId>
			<artifactId>javax.inject</artifactId>
			<version>1</version>
		</dependency>
				
		<!-- Servlet -->
		<dependency>
		    <groupId>javax.servlet</groupId>
		    <artifactId>javax.servlet-api</artifactId>
		    <version>4.0.1</version>
		    <scope>provided</scope>
		</dependency>
		<dependency>
		    <groupId>javax.servlet.jsp</groupId>
		    <artifactId>javax.servlet.jsp-api</artifactId>
		    <version>2.3.3</version>
		    <scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId>
			<version>1.2</version>
		</dependency>
	
		<!-- Test -->
		<!-- 원래 scope가 존재하지만 빼고 사용 -->
		<!-- TEST프로그램을 사용하기 위해 기본적으로 빌드되어있는 라이브러리 => 버전만 업그레이드 해주기  -->
		<!-- 이것이 있어야 Model이 잘동작되는지 알수있음  -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.13</version>
		</dependency> 
		
		<!-- 4/9 추가 등록 -->
		<!-- https://mvnrepository.com/artifact/org.springframework/spring-test -->
		<!-- Spring에 Test 기능(Junit)을 제공하는 라이브러리 , Junit프로그램을 Spring에서 사용할 수 있도록 해쥬는 라이브러리
			  => 몇가지 어노테이션을 제공해준다. / ★Spring과 버전 맞춰주기★  -->
		<!--  => Junit을 이용해 Spring에 Test 기능을 제공하는 프로그램 -->	  
		<dependency>
		    <groupId>org.springframework</groupId>
		    <artifactId>spring-test</artifactId>
		    <version>${org.springframework-version}</version>
		   <!--  <scope>test</scope> -->
		</dependency>
		
		
		<!-- https://mvnrepository.com/artifact/xerces/xercesImpl -->		
		<!-- xerces : 로그 프로그램에 문제가 발생할 경우 문제를 해결하기 위한 기능을 제공하는 라이브러리  -->
		<dependency>
		    <groupId>xerces</groupId>
		    <artifactId>xercesImpl</artifactId>
		    <version>2.12.0</version>
		</dependency>
		
		<!-- 3/26등록 -->
		<!-- https://mvnrepository.com/artifact/org.aspectj/aspectjweaver -->
		<!-- aspectj와 버전이 같아야 에러가 안나고 합쳐진다!! 버전맞춰주기 -->
		<!-- => Spring AOP의 AspectJ Weaving 기능을 제공하는 라이브러리 -->
		<!-- => Aspect가 있어야 실행 >> 실행시 합쳐지는것 Weaver 역할(핵심+횡단) -->
		<!-- 개발자가 AOP기능을 이용하기 위해서는 weaver가 필요
			  이미 구성된 Adiviser가 있다면 Runtime만 존재해도 무관!! -->
		<dependency>
		    <groupId>org.aspectj</groupId>
		    <artifactId>aspectjweaver</artifactId>
		    <version>${org.aspectj-version}</version>
		</dependency>
		
		<!-- https://mvnrepository.com/artifact/org.springframework/spring-context-support -->
		<!-- Spring-context-support는 Spring-context 기능에 대한 확장 라이브러리 => JavaMailSender를 사용가능 
		 , Spring-context는 기본적인 기능을 제공  -->
		<dependency>
		    <groupId>org.springframework</groupId>
		    <artifactId>spring-context-support</artifactId>
		    <!-- <version>5.2.5.RELEASE</version> -->
		    <!-- core뿐만아니라 포괄적인 기능을 제공하는 라이브러리 -->
		    <version>${org.springframework-version}</version>
		</dependency>
		
		<!-- https://mvnrepository.com/artifact/com.sun.mail/javax.mail -->
		<!-- Java Mail 기능을 제공하는 라이브러리, Spring-context-support라이브러리가 빌드되어야 사용가능 -->
		<dependency>
		    <groupId>com.sun.mail</groupId>
		    <artifactId>javax.mail</artifactId>
		    <version>1.6.2</version>
		</dependency>
		
		<!-- 3/31추가 등록 -->
		<!-- https://mvnrepository.com/artifact/oracle/ojdbc6 -->
		<!--  => JDBC 기능을 구현하기 위한 Oracle Driver 라이브러리 , 이것이 있어야 JDBC기능을 구현 가능 => 라이브러리 저장소(Repository)추가 -->
		<!--  => Error이유 >> Problems >> 이 파일 다운로드 불가! >> 라이센스문제로 다운불가, Repositories가 central이여야 하지만 Datanucleus 인데 
				우리는 등록이 안되어 있으므로 Danucleus라이브러리 등록해줘야해
				ojdbc6.jar파일을 직접 다운받아 빌드시켜줘도 상관없지만 , 그러면 Maven을 사용하는 이유가 없음 - 비권장   -->
		<dependency>
		    <groupId>oracle</groupId>
		    <artifactId>ojdbc6</artifactId>
		    <version>11.2.0.3</version>
		</dependency>
		
		
		<!-- DataSource 라이브러리 추가 -->
		<!-- https://mvnrepository.com/artifact/org.apache.commons/commons-dbcp2 -->
		<!--  => Apache에서 제공하는 DataSource 라이브러리, 의존관계 라이브러리도 함께 빌드된다. -->
		<dependency>
		    <groupId>org.apache.commons</groupId>
		    <artifactId>commons-dbcp2</artifactId>
		    <version>2.7.0</version>
		</dependency>
		
		<!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc -->
		<!--  => SpringDAO기능(클래스)을 구현하기 위한 라이브러리 - DataSource 기능 제공  -->
		<!--  => Spring-tx 라이브러리 자동 빌드 : Transaction 기능을 제공하는 라이브러리 -->
		<dependency>
		    <groupId>org.springframework</groupId>
		    <artifactId>spring-jdbc</artifactId>
		    <version>${org.springframework-version}</version>
		</dependency>
		
		<!-- 4/6 유효성 추가 ValidController.java -->
		<!-- https://mvnrepository.com/artifact/javax.validation/validation-api -->
		<!--  => Spring Form 기능을 이용하여 전달된 입력값에 대한 유효성 검사 기능을 제공하는 라이브러리 -->
		<dependency>
		    <groupId>javax.validation</groupId>
		    <artifactId>validation-api</artifactId>
		    <version>2.0.1.Final</version>
		</dependency>
		
		<!-- https://mvnrepository.com/artifact/org.hibernate.validator/hibernate-validator -->
		<!-- => 확장된 유효성 검사기능을 제공하는 라이브러리 : hibernate 에서 제공  -->
		<dependency>
		    <groupId>org.hibernate.validator</groupId>
		    <artifactId>hibernate-validator</artifactId>
		    <version>6.1.2.Final</version>
		</dependency>
		
		<!-- https://mvnrepository.com/artifact/org.apache.tiles/tiles-extras -->
		<!-- 4/7 추가등록 => 템플릿 페이지를 이용한 사이트 구현 기능을 제공하는 라이브러리 -->
		<dependency>
		    <groupId>org.apache.tiles</groupId>
		    <artifactId>tiles-extras</artifactId>
		    <version>3.0.8</version>
		</dependency>
		
		<!-- 4/8 추가등록 XssController.java -->
		<!-- https://mvnrepository.com/artifact/com.lyncode/jtwig-core -->
		<!--  => HTML 태그를 제거하는 기능을 제공하는 라이브러리 -->
		<dependency>
		    <groupId>com.lyncode</groupId>
		    <artifactId>jtwig-core</artifactId>
		    <version>3.1.1</version>
		</dependency>
		
		<!-- 4/8 추가등록 MyBatis와 MyBatis를 사용할 수 있는 라이브러리 두개 등록 / MyBaits기능을 사용하려면 ojdbc6 + DataSource라이브러리 필요 -->
		<!-- https://mvnrepository.com/artifact/org.mybatis/mybatis -->
		<!-- :  Mybatis 기능을 제공하는 라이브러리 : 관련 클래스 & 어노테이션 쉽게 사용가능
		이거 사용하려믄 : ojdbc6 + Apache에서 제공하는 DataSource 라이브러리 or [권장]SpringDAO기능(클래스)을 구현하기 위한 라이브러리
                             + Spring-tx (ojdbc6빌드하면 자동빌드)  ★필요★  -->
		<dependency>
		    <groupId>org.mybatis</groupId>
		    <artifactId>mybatis</artifactId>
		    <version>3.5.4</version>
		</dependency>
		
		<!-- https://mvnrepository.com/artifact/org.mybatis/mybatis-spring -->
		<!-- Spring 에서 MyBatis 기능을 사용할 수 있는 기능을 제공하는 라이브러리 -->
		<dependency>
		    <groupId>org.mybatis</groupId>
		    <artifactId>mybatis-spring</artifactId>
		    <version>2.0.4</version>
		</dependency>
		
		<!-- https://mvnrepository.com/artifact/org.bgee.log4jdbc-log4j2/log4jdbc-log4j2-jdbc4 -->
		<!--  => JDBC 관련 로그를 Spring에 전달하는 라이브러리 => 외부에서 만들어진 로그를 구현체에게 전달해주는 라이브러리  -->
		<dependency>
		    <groupId>org.bgee.log4jdbc-log4j2</groupId>
		    <artifactId>log4jdbc-log4j2-jdbc4</artifactId>
		    <version>1.16</version>
		</dependency>
		
		
		<!-- 4/13 추가 등록 -->
		<!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind -->
		<!--  => Java 객체를 JSON 형식의 문자열로 변환하는 기능을 제공하는 라이브러리 -->
		<dependency>
		    <groupId>com.fasterxml.jackson.core</groupId>
		    <artifactId>jackson-databind</artifactId>
		    <version>2.12.6.1</version>
		</dependency>
		
		<!--  4/16 추가 등록 => 파일 업로드 위해 -->
		<!-- https://mvnrepository.com/artifact/commons-fileupload/commons-fileupload -->
		<!-- => 파일 업로드  -->
		<dependency>
		    <groupId>commons-fileupload</groupId>
		    <artifactId>commons-fileupload</artifactId>
		    <version>1.4</version>
		</dependency>
		
		<!-- https://mvnrepository.com/artifact/org.imgscalr/imgscalr-lib -->
		<!--  => 이미지 파일의 크기를 변경하는 기능을 제공하는 라이브러리 -->
		<dependency>
		    <groupId>org.imgscalr</groupId>
		    <artifactId>imgscalr-lib</artifactId>
		    <version>4.2</version>
		</dependency>
		
		
		<!-- 4/17 Userinfo추가 -->
		<!-- https://mvnrepository.com/artifact/org.mindrot/jbcrypt -->
		<!--  => 암호화 처리 기능을 제공하는 라이브러리 / Spring에서 제공하는 SpringSercurity도 사용 가능   -->
		<dependency>
		    <groupId>org.mindrot</groupId>
		    <artifactId>jbcrypt</artifactId>
		    <version>0.4</version>
		</dependency>

		
	</dependencies>
	
		<!-- repositories :라이브러리 저장소를 설정하기 위한 상위 엘리먼트 -->
		<repositories>
			<!-- repository : 라이브러리 저장소를 설정하기 위한 엘리먼트 -->
			<repository>
				<!-- id : 라이브러리 저장소의 고유값을 설정하기 위한 엘리먼트 -->
				<id>Datanucleus</id>
				<!-- url : 라이브러리 저장소의 url주소를 설정하기 위한 엘리먼트 -->
				<url>http://www.datanucleus.org/downloads/maven2/</url>
			</repository>
		</repositories>
		
		
    <build>
        <plugins>
            <plugin>
                <artifactId>maven-eclipse-plugin</artifactId>
                <version>2.9</version>
                <configuration>
                    <additionalProjectnatures>
                        <projectnature>org.springframework.ide.eclipse.core.springnature</projectnature>
                    </additionalProjectnatures>
                    <additionalBuildcommands>
                        <buildcommand>org.springframework.ide.eclipse.core.springbuilder</buildcommand>
                    </additionalBuildcommands>
                    <downloadSources>true</downloadSources>
                    <downloadJavadocs>true</downloadJavadocs>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>2.5.1</version>
                <configuration>
                    <source>1.6</source>
                    <target>1.6</target>
                    <compilerArgument>-Xlint:all</compilerArgument>
                    <showWarnings>true</showWarnings>
                    <showDeprecation>true</showDeprecation>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <version>1.2.1</version>
                <configuration>
                    <mainClass>org.test.int1.Main</mainClass>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>
